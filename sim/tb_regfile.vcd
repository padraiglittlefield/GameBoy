$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module tb_regfile $end
   $var wire 1 > clk $end
   $var wire 1 # rst $end
   $var wire 8 $ wd [7:0] $end
   $var wire 1 % we $end
   $var wire 4 & wa [3:0] $end
   $var wire 8 , rd [7:0] $end
   $var wire 4 A rda [3:0] $end
   $var wire 16 - addr_out [15:0] $end
   $var wire 4 ' r1_addr [3:0] $end
   $var wire 4 ( r2_addr [3:0] $end
   $var wire 8 ? r1 [7:0] $end
   $var wire 8 @ r2 [7:0] $end
   $var wire 8 ) alu_res [7:0] $end
   $var wire 1 * alu_we $end
   $var wire 4 + alu_waddr [3:0] $end
   $var wire 16 B idu_res [15:0] $end
   $var wire 1 C idu_we $end
   $var wire 16 . sp [15:0] $end
   $var wire 32 D CLK_PERIOD [31:0] $end
   $var wire 32 E DELAY [31:0] $end
   $var real 64 F DUTY_CYCLE $end
   $scope module register_file $end
    $var wire 1 > clk $end
    $var wire 1 # rst $end
    $var wire 8 $ wd [7:0] $end
    $var wire 1 % we $end
    $var wire 4 & wa [3:0] $end
    $var wire 8 , rd [7:0] $end
    $var wire 4 A rda [3:0] $end
    $var wire 16 - addr_out [15:0] $end
    $var wire 4 ' r1_addr [3:0] $end
    $var wire 4 ( r2_addr [3:0] $end
    $var wire 8 ? r1 [7:0] $end
    $var wire 8 @ r2 [7:0] $end
    $var wire 8 ) alu_res [7:0] $end
    $var wire 1 * alu_we $end
    $var wire 4 + alu_waddr [3:0] $end
    $var wire 16 B idu_res [15:0] $end
    $var wire 1 C idu_we $end
    $var wire 16 . sp [15:0] $end
    $var wire 8 / regs[0] [7:0] $end
    $var wire 8 0 regs[1] [7:0] $end
    $var wire 8 1 regs[2] [7:0] $end
    $var wire 8 2 regs[3] [7:0] $end
    $var wire 8 3 regs[4] [7:0] $end
    $var wire 8 4 regs[5] [7:0] $end
    $var wire 8 5 regs[6] [7:0] $end
    $var wire 8 6 regs[7] [7:0] $end
    $var wire 8 7 regs[8] [7:0] $end
    $var wire 8 8 regs[9] [7:0] $end
    $var wire 8 9 regs[10] [7:0] $end
    $var wire 8 : regs[11] [7:0] $end
    $var wire 8 ; regs[12] [7:0] $end
    $var wire 8 < regs[13] [7:0] $end
    $var wire 32 = i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b00000000 $
0%
b0000 &
b0000 '
b0000 (
b00000000 )
0*
b0000 +
b00000000 ,
b0000000000000000 -
b0000000000000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000 8
b00000000 9
b00000000 :
b00000000 ;
b00000000 <
b00000000000000000000000000000000 =
0>
b00000000 ?
b00000000 @
b0000 A
b0000000000000000 B
0C
b00000000000000000000000000010100 D
b00000000000000000000000000000101 E
r0.5 F
#5000
b00000000000000000000000000001110 =
1>
#10000
0>
#15000
0#
b00000101 $
1%
b0010 &
b00000101 1
1>
#20000
0>
#25000
b00000111 $
b0100 &
b00000111 3
1>
#30000
0>
#35000
0%
b0010 '
b0100 (
b00010011 )
1*
b0010 +
b00010011 1
1>
b00010011 ?
b00000111 @
#40000
0>
#45000
1>
#50000
0>
#55000
1>
